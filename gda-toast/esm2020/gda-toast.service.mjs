import { Injectable } from '@angular/core';
import { GdaToastComponent } from './gda-toast.component';
import * as i0 from "@angular/core";
export class GdaToastConfig {
    constructor(direction = 'top-right', classToast = '', styleToast = {}, timing = 3000) {
        this.direction = direction;
        this.classToast = classToast;
        this.styleToast = styleToast;
        this.timing = timing;
    }
}
class GdaToastConfigForComponent extends GdaToastConfig {
    constructor(id = '') {
        super();
        this.id = id;
    }
}
export class GdaToast {
    constructor(componentFactoryResolver, appRef, injector) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
        this.toastConfigDefault = new GdaToastConfig();
    }
    selectedComponentRef(direction = 'top-right') {
        switch (direction) {
            case 'top-center':
                return 'componentRefTopCenter';
            case 'top-left':
                return 'componentRefTopLeft';
            case 'bottom-right':
                return 'componentRefBottomRight';
            case 'bottom-center':
                return 'componentRefBottomCenter';
            case 'bottom-left':
                return 'componentRefBottomLeft';
            case 'top-right':
            default:
                return 'componentRefTopRight';
        }
    }
    openToast(text, config) {
        if (!document.body.querySelector('.gda-toast-' + (config?.direction || this.toastConfigDefault.direction))) {
            this[this.selectedComponentRef((config?.direction || this.toastConfigDefault.direction))] = this.componentFactoryResolver
                .resolveComponentFactory(GdaToastComponent)
                .create(this.injector);
            this.appRef.attachView(this[this.selectedComponentRef((config?.direction || this.toastConfigDefault.direction))].hostView);
            const domElem = this[this.selectedComponentRef((config?.direction || this.toastConfigDefault.direction))].hostView
                .rootNodes[0];
            document.body.appendChild(domElem);
            this.createToast(text, config);
        }
        else {
            this.createToast(text, config);
        }
    }
    createToast(text, config) {
        const c = {
            id: 'gda-toast-' + (new Date().getTime()),
            direction: config?.direction || this.toastConfigDefault.direction,
            classToast: config?.classToast || this.toastConfigDefault.classToast,
            styleToast: config?.styleToast || this.toastConfigDefault.styleToast,
            timing: config?.timing || this.toastConfigDefault.timing,
        };
        this[this.selectedComponentRef((config?.direction || this.toastConfigDefault.direction))].instance.toasts.push({ text: text, config: c });
        if (c.timing !== 'indeterminate') {
            setTimeout(() => {
                this[this.selectedComponentRef((config?.direction || this.toastConfigDefault.direction))].instance.toasts = this[this.selectedComponentRef((config?.direction || this.toastConfigDefault.direction))].instance.toasts.filter((toast) => toast.config.id !== c.id);
                setTimeout(() => {
                    if (!this[this.selectedComponentRef((config?.direction || this.toastConfigDefault.direction))].instance.toasts.length) {
                        this[this.selectedComponentRef((config?.direction || this.toastConfigDefault.direction))].instance.closeToast.unsubscribe();
                        this.appRef.detachView(this[this.selectedComponentRef((config?.direction || this.toastConfigDefault.direction))].hostView);
                        this[this.selectedComponentRef((config?.direction || this.toastConfigDefault.direction))].destroy();
                    }
                }, 500);
            }, c.timing || 0);
        }
        else {
            this[this.selectedComponentRef((config?.direction || this.toastConfigDefault.direction))].instance.closeToast.subscribe((id) => {
                this[this.selectedComponentRef((config?.direction || this.toastConfigDefault.direction))].instance.toasts = this[this.selectedComponentRef((config?.direction || this.toastConfigDefault.direction))].instance.toasts.filter((toast) => toast.config.id !== id);
                setTimeout(() => {
                    if (!this[this.selectedComponentRef((config?.direction || this.toastConfigDefault.direction))].instance.toasts.length) {
                        this[this.selectedComponentRef((config?.direction || this.toastConfigDefault.direction))].instance.closeToast.unsubscribe();
                        this.appRef.detachView(this[this.selectedComponentRef((config?.direction || this.toastConfigDefault.direction))].hostView);
                        this[this.selectedComponentRef((config?.direction || this.toastConfigDefault.direction))].destroy();
                    }
                }, 500);
            });
        }
    }
}
GdaToast.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: GdaToast, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.ApplicationRef }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
GdaToast.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: GdaToast, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: GdaToast, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,