import { EventEmitter, Injectable } from '@angular/core';
import * as i0 from "@angular/core";
class ListTabsModel {
    constructor(position, title) {
        this.position = position;
        this.title = title;
    }
}
export class GdaTabsPrivateService {
    constructor() {
        this.callForId = new EventEmitter();
        this.listTabs = [];
        this.buttonLoaded = new EventEmitter();
        this.indexTabVal = 0;
        this.indexTabChanges = new EventEmitter();
        this.indexTabChangesEmit = new EventEmitter();
    }
    tabLoaded(el, i) {
        if (!this.gdaTabsEl)
            this.gdaTabsEl = el;
        if (i === undefined) {
            setTimeout(() => this.createTabs());
        }
        else {
            const tabsElN = this.gdaTabsEl.querySelectorAll('gda-tab')?.length || 0;
            if (tabsElN === (i + 1))
                this.createTabs();
        }
    }
    createTabs() {
        this.listTabs = [];
        const tabs = this.gdaTabsEl.querySelectorAll('gda-tab');
        tabs.forEach((tab, index) => this.callForId.emit(index));
        this.buttonLoaded.emit(this.listTabs);
    }
    addTab(tab) {
        this.listTabs.push(tab);
    }
    getIndexTab() {
        return this.indexTabVal;
    }
    setIndexTab(indexTab) {
        this.indexTabChanges.emit({ new: indexTab, old: this.indexTabVal });
        this.indexTabVal = indexTab;
    }
    setTitle(position, title) {
        if (this.listTabs.some((tab) => tab.position = position)) {
            this.listTabs[position].title = title;
            this.buttonLoaded.emit(this.listTabs);
        }
    }
    getAnimation() {
        return this.animation;
    }
    setAnimation(animation) {
        this.animation = animation;
    }
}
GdaTabsPrivateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: GdaTabsPrivateService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
GdaTabsPrivateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: GdaTabsPrivateService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: GdaTabsPrivateService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2RhLXRhYnMtcHJpdmF0ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZ2RhLWxpYnJhcnktZGV2L3Byb2plY3RzL2dkYS10YWJzL3NyYy9nZGEtdGFicy1wcml2YXRlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFjLFlBQVksRUFBRSxVQUFVLEVBQTBCLE1BQU0sZUFBZSxDQUFDOztBQUk3RixNQUFNLGFBQWE7SUFJakIsWUFBWSxRQUFnQixFQUFFLEtBQWdDO1FBQzVELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO0lBQ3BCLENBQUM7Q0FDRjtBQUdELE1BQU0sT0FBTyxxQkFBcUI7SUFVaEM7UUFDRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDcEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUMxQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUNoRCxDQUFDO0lBRU0sU0FBUyxDQUFDLEVBQWUsRUFBRSxDQUFVO1FBQzFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUztZQUFFLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUNuQixVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7U0FDckM7YUFBTTtZQUNMLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxJQUFJLENBQUMsQ0FBQztZQUN4RSxJQUFJLE9BQU8sS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQzVDO0lBQ0gsQ0FBQztJQUVPLFVBQVU7UUFDaEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbkIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQWEsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNqRSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxHQUFrQjtRQUM5QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRU0sV0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztJQUVNLFdBQVcsQ0FBQyxRQUFnQjtRQUNqQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDO0lBQzlCLENBQUM7SUFFTSxRQUFRLENBQUMsUUFBZ0IsRUFBRSxLQUFhO1FBQzdDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFrQixFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxFQUFFO1lBQ3ZFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztZQUN0QyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDdkM7SUFDSCxDQUFDO0lBRU0sWUFBWTtRQUNqQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUVNLFlBQVksQ0FBQyxTQUFrQjtRQUNwQyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUM3QixDQUFDOztrSEE5RFUscUJBQXFCO3NIQUFyQixxQkFBcUI7MkZBQXJCLHFCQUFxQjtrQkFEakMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5qZWN0YWJsZSwgUmVuZGVyZXIyLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG4vKiBSWEpTICovXHJcbmltcG9ydCB7IGRlbGF5LCBvZiB9IGZyb20gJ3J4anMnO1xyXG5cclxuY2xhc3MgTGlzdFRhYnNNb2RlbCB7XHJcbiAgcG9zaXRpb246IG51bWJlcjtcclxuICB0aXRsZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PiB8IGFueTtcclxuXHJcbiAgY29uc3RydWN0b3IocG9zaXRpb246IG51bWJlciwgdGl0bGU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4pIHtcclxuICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcclxuICAgIHRoaXMudGl0bGUgPSB0aXRsZVxyXG4gIH1cclxufVxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgR2RhVGFic1ByaXZhdGVTZXJ2aWNlIHtcclxuICBwcml2YXRlIGdkYVRhYnNFbCE6IEhUTUxFbGVtZW50O1xyXG4gIGNhbGxGb3JJZDogRXZlbnRFbWl0dGVyPG51bWJlcj47XHJcbiAgcHJpdmF0ZSBsaXN0VGFiczogTGlzdFRhYnNNb2RlbFtdO1xyXG4gIGJ1dHRvbkxvYWRlZDogRXZlbnRFbWl0dGVyPExpc3RUYWJzTW9kZWxbXT47XHJcbiAgcHJpdmF0ZSBpbmRleFRhYlZhbDogbnVtYmVyO1xyXG4gIGluZGV4VGFiQ2hhbmdlczogRXZlbnRFbWl0dGVyPHtuZXc6IG51bWJlciwgb2xkOiBudW1iZXJ9PjtcclxuICBpbmRleFRhYkNoYW5nZXNFbWl0OiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcclxuICBwcml2YXRlIGFuaW1hdGlvbiE6IGJvb2xlYW47XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5jYWxsRm9ySWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICB0aGlzLmxpc3RUYWJzID0gW107XHJcbiAgICB0aGlzLmJ1dHRvbkxvYWRlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIHRoaXMuaW5kZXhUYWJWYWwgPSAwO1xyXG4gICAgdGhpcy5pbmRleFRhYkNoYW5nZXMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICB0aGlzLmluZGV4VGFiQ2hhbmdlc0VtaXQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdGFiTG9hZGVkKGVsOiBIVE1MRWxlbWVudCwgaT86IG51bWJlcik6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLmdkYVRhYnNFbCkgdGhpcy5nZGFUYWJzRWwgPSBlbDtcclxuICAgIGlmIChpID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLmNyZWF0ZVRhYnMoKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCB0YWJzRWxOID0gdGhpcy5nZGFUYWJzRWwucXVlcnlTZWxlY3RvckFsbCgnZ2RhLXRhYicpPy5sZW5ndGggfHwgMDtcclxuICAgICAgaWYgKHRhYnNFbE4gPT09IChpICsgMSkpIHRoaXMuY3JlYXRlVGFicygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVUYWJzKCk6IHZvaWQge1xyXG4gICAgdGhpcy5saXN0VGFicyA9IFtdO1xyXG4gICAgY29uc3QgdGFicyA9IHRoaXMuZ2RhVGFic0VsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2dkYS10YWInKTtcclxuICAgIHRhYnMuZm9yRWFjaCgodGFiLCBpbmRleDogbnVtYmVyKSA9PiB0aGlzLmNhbGxGb3JJZC5lbWl0KGluZGV4KSk7XHJcbiAgICB0aGlzLmJ1dHRvbkxvYWRlZC5lbWl0KHRoaXMubGlzdFRhYnMpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFkZFRhYih0YWI6IExpc3RUYWJzTW9kZWwpOiB2b2lkIHtcclxuICAgIHRoaXMubGlzdFRhYnMucHVzaCh0YWIpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEluZGV4VGFiKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5pbmRleFRhYlZhbDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXRJbmRleFRhYihpbmRleFRhYjogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLmluZGV4VGFiQ2hhbmdlcy5lbWl0KHtuZXc6IGluZGV4VGFiLCBvbGQ6IHRoaXMuaW5kZXhUYWJWYWx9KTtcclxuICAgIHRoaXMuaW5kZXhUYWJWYWwgPSBpbmRleFRhYjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXRUaXRsZShwb3NpdGlvbjogbnVtYmVyLCB0aXRsZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5saXN0VGFicy5zb21lKCh0YWI6IExpc3RUYWJzTW9kZWwpID0+IHRhYi5wb3NpdGlvbiA9IHBvc2l0aW9uKSkge1xyXG4gICAgICB0aGlzLmxpc3RUYWJzW3Bvc2l0aW9uXS50aXRsZSA9IHRpdGxlO1xyXG4gICAgICB0aGlzLmJ1dHRvbkxvYWRlZC5lbWl0KHRoaXMubGlzdFRhYnMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEFuaW1hdGlvbigpOiBib29sZWFuIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLmFuaW1hdGlvbjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXRBbmltYXRpb24oYW5pbWF0aW9uOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICB0aGlzLmFuaW1hdGlvbiA9IGFuaW1hdGlvbjtcclxuICB9XHJcbn1cclxuIl19